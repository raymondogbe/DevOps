QUESTION:
The Nautilus DevOps team is working on a Kubernetes template to deploy a web application on the cluster. There are some requirements to create/use persistent volumes to store the application code, and the template needs to be designed accordingly. Please find more details below:

Create a PersistentVolume named as pv-nautilus. Configure the spec as storage class should be manual, set capacity to 5Gi, set access mode to ReadWriteOnce, volume type should be hostPath and set path to /mnt/itadmin (this directory is already created, you might not be able to access it directly, so you need not to worry about it).

Create a PersistentVolumeClaim named as pvc-nautilus. Configure the spec as storage class should be manual, request 2Gi of the storage, set access mode to ReadWriteOnce.

Create a pod named as pod-nautilus, mount the persistent volume you created with claim name pvc-nautilus at document root of the web server, the container within the pod should be named as container-nautilus using image httpd with latest tag only (remember to mention the tag i.e httpd:latest).

Create a node port type service named web-nautilus using node port 30008 to expose the web server running within the pod.

Note: The kubectl utility on jump_host has been configured to work with the kubernetes cluster.



SOLUTION

apiVersion: v1
kind: PersistentVolume
metadata:
  name: pv-nautilus
spec:
  storageClassName: manual
  accessModes:
       - ReadWriteOnce
  capacity:
       storage: 5Gi
  hostPath:
          path: /mnt/itadmin

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pvc-nautilus
spec:
  storageClassName: manual
  accessModes:
       - ReadWriteOnce
  resources:
      requests:
        storage: 2Gi

---
apiVersion: v1
kind: Pod
metadata:
  name: pod-nautilus
  labels:
    app: my-pod-nautilus
spec:
  containers:
  - image: httpd:latest
    name: container-nautilus
    ports:
    - containerPort: 80
    volumeMounts:
    - mountPath: /var/www/html
      name: storage-nautilus
  volumes:
  - name: storage-nautilus
    persistentVolumeClaim:
            claimName: pvc-nautilus

---
apiVersion: v1
kind: Service
metadata:
  name: web-nautilus
spec:
  type: NodePort
  selector:
    app: my-pod-nautilus
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
      nodePort: 30008
      
      
Though, I earlier had an issue, which was that I didnt link the pod to the Nodeport in the service .yaml file, hence, I could not access the webserver. 
Error was corrected using the selector in the service
