QUESTION:
We have an application running on Kubernetes cluster using nginx web server. 
The Nautilus application development team has pushed some of the latest changes and those changes need be deployed. 
The Nautilus DevOps team has created an image nginx:1.19 with the latest changes.

Perform a rolling update for this application and incorporate nginx:1.18 image. The deployment name is nginx-deployment

Make sure all pods are up and running after the update.

Note: The kubectl utility on jump_host has been configured to work with the kubernetes cluster.




SOLUTION
Rolling update is all about upgrading a deployment to the lastest image.
What the task is asking me to do is to set the deployment container image to 1.18

kubectl get all:  Helps us to have a view of the pods, services and deployment
NAME                                    READY   STATUS    RESTARTS   AGE
pod/nginx-deployment-74fb588559-2qw8j   1/1     Running   0          2m9s
pod/nginx-deployment-74fb588559-d4fk8   1/1     Running   0          2m9s
pod/nginx-deployment-74fb588559-vnrvl   1/1     Running   0          2m10s

NAME                    TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)        AGE
service/kubernetes      ClusterIP   10.96.0.1       <none>        443/TCP        122m
service/nginx-service   NodePort    10.96.196.237   <none>        80:30008/TCP   2m10s

NAME                               READY   UP-TO-DATE   AVAILABLE   AGE
deployment.apps/nginx-deployment   3/3     3            3           2m10s

NAME                                          DESIRED   CURRENT   READY   AGE
replicaset.apps/nginx-deployment-74fb588559   3         3         3       2m10s


kubectl rollout history deployment nginx-deployment

kubectl get deployments
NAME               READY   UP-TO-DATE   AVAILABLE   AGE
nginx-deployment   3/3     3            3           6m10s


#kubectl rollout history deployment nginx-deployment --revision=1

#kubectl set image deployment nginx-deployment nginx-container=nginx:1.18. # The nginx-container is the name of the container.

This command set the image of the deployment to 1.18

kubectl describe deployment nginx-deployment
Name:                   nginx-deployment
Namespace:              default
CreationTimestamp:      Thu, 27 Jan 2022 12:14:24 +0000
Labels:                 app=nginx-app
                        type=front-end
Annotations:            deployment.kubernetes.io/revision: 2
Selector:               app=nginx-app
Replicas:               3 desired | 3 updated | 3 total | 3 available | 0 unavailable
StrategyType:           RollingUpdate
MinReadySeconds:        0
RollingUpdateStrategy:  25% max unavailable, 25% max surge
Pod Template:
  Labels:  app=nginx-app
  Containers:
   nginx-container:
    Image:        nginx:1.18
    Port:         <none>
    Host Port:    <none>
    Environment:  <none>
    Mounts:       <none>
  Volumes:        <none>
Conditions:
  Type           Status  Reason
  ----           ------  ------
  Available      True    MinimumReplicasAvailable
  Progressing    True    NewReplicaSetAvailable
OldReplicaSets:  <none>
NewReplicaSet:   nginx-deployment-7b6877b9b5 (3/3 replicas created)
Events:
  Type    Reason             Age    From                   Message
  ----    ------             ----   ----                   -------
  Normal  ScalingReplicaSet  6m18s  deployment-controller  Scaled up replica set nginx-deployment-74fb588559 to 3
  Normal  ScalingReplicaSet  53s    deployment-controller  Scaled up replica set nginx-deployment-7b6877b9b5 to 1
  Normal  ScalingReplicaSet  40s    deployment-controller  Scaled down replica set nginx-deployment-74fb588559 to 2
  Normal  ScalingReplicaSet  40s    deployment-controller  Scaled up replica set nginx-deployment-7b6877b9b5 to 2
  Normal  ScalingReplicaSet  37s    deployment-controller  Scaled down replica set nginx-deployment-74fb588559 to 1
  Normal  ScalingReplicaSet  37s    deployment-controller  Scaled up replica set nginx-deployment-7b6877b9b5 to 3
  Normal  ScalingReplicaSet  34s    deployment-controller  Scaled down replica set nginx-deployment-74fb588559 to 0
  
kubectl describe deployments nginx-deployment | grep -i image:
This gives the current image name and version.
