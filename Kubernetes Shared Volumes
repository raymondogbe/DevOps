QUESTION:
We are working on an application that will be deployed on multiple containers within a pod on Kubernetes cluster. 
There is a requirement to share a volume among the containers to save some temporary data. 
The Nautilus DevOps team is developing a similar template to replicate the scenario. Below you can find more details about it.


Create a pod named volume-share-xfusion.

For the first container, use image fedora with latest tag only and remember to mention the tag i.e fedora:latest, container should be named as volume-container-xfusion-1, and run a sleep command for it so that it remains in running state. 
Volume volume-share should be mounted at path /tmp/ecommerce.

For the second container, use image fedora with the latest tag only and remember to mention the tag i.e fedora:latest, container should be named as volume-container-xfusion-2, and again run a sleep command for it so that it remains in running state. 
Volume volume-share should be mounted at path /tmp/apps.

Volume name should be volume-share of type emptyDir.

After creating the pod, exec into the first container i.e volume-container-xfusion-1, and just for testing create a file ecommerce.txt with any content under the mounted path of first container i.e /tmp/ecommerce.

The file ecommerce.txt should be present under the mounted path /tmp/apps on the second container volume-container-xfusion-2 as well, since they are using a shared volume.

Note: The kubectl utility on jump_host has been configured to work with the kubernetes cluster.



SOLUTION
From previous knowledge, the solution to this was quite straight forward.
All I need to do was to create a pod with volume and then create 2 containers to share the same volume.

#vi volume.yaml
apiVersion: v1
kind: Pod
metadata:
  name: volume-share-xfusion
spec:
  containers:
  - name: volume-container-xfusion-1   (First container)
    image: fedora:latest
    command: ["/bin/sh"]
    args: ["-c", "sleep 600"]
    volumeMounts:      ( The mounted volume for first container)
    - name: volume-share
      mountPath: /tmp/ecommerce
  - name: volume-container-xfusion-2  (second container)
    image: fedora:latest
    command: ["/bin/sh"]
    args: ["-c", "sleep 600"]
    volumeMounts:     (The mounted volume for the second container)
    - name: volume-share
      mountPath: /tmp/apps
  volumes:   (The volume for the pod) Remember that the container volumes must have the same name with the pod volume.
  - name: volume-share
    emptyDir: {}
    
  To log into the container
  kubectl exec -it volume-share-xfusion -c volume-container-xfusion-1 -- sh
  Here is the syntax: kubectl exec -it pod_name -c container_name -- sh
  
  Once you are inside the container, change directory to the tmp/ecommerce and use the touch command to create the file (touch beta.txt)
  
  Use same syntax to enter the second container to verify
  kubectl exec -it volume-share-xfusion -c volume-container-xfusion-2 -- sh
